#!/usr/bin/env python3
from wwara.plan import REPEATERS, EXCEPTIONS, ERRORS
from wwara.database import coordinations

LAT_LO = 45.90
LAT_HI = 49.00
LON_LO = -124.22
LON_HI = -121.32


def match(channel):
    for rule in REPEATERS:
        if channel in rule:
            return True
    return False


def in_region(channel):
    if not (LAT_LO < channel.latitude < LAT_HI):
        return False
    if not (LON_LO < channel.longitude < LON_HI):
        return False
    return True


for channel in coordinations(filenames=True):
    error = not match(channel)
    comments = []
    if match(~channel):
        error = False
        comments.append("REVERSED")
    if not channel.modes:
        error = True
        comments.append("NO MODES")
    if not in_region(channel):
        error = True
        comments.append("OUT OF BOUNDS")
    if "FM" in channel.modes:
        if not (channel.input_tone or channel.input_code):
            error = True
            comments.append("NO TONE/CODE")
        if channel.input_tone and channel.input_code:
            error = True
            comments.append("AMBIGUOUS TONE/CODE")
    if "DMR" in channel.modes:
        if not channel.dmr_cc:
            error = True
            comments.append("NO CC")
    if "C4FM" in channel.modes:
        if channel.c4fm_dsq is None:
            # DSQ is obsoleted by DG-ID
            comments.append("NO DSQ")
        # DSQ is limited to 1-126
        # DG-ID is 0-99
        # Neither is octal (AFAICT)
        if not (0 <= channel.c4fm_dsq <= 99):
            comments.append("DG-ID OUT OF RANGE")
        if not (0 <= channel.c4fm_dsq <= 126):
            comments.append("DSQ OUT OF RANGE")
    if "P25" in channel.modes:
        if not channel.p25_nac:
            error = True
            comments.append("NO NAC")
    if "NXDN" in channel.modes:
        if not channel.nxdn_ran:
            error = True
            comments.append("NO RAN")
    if channel.errors:
        error = True
        comments.extend(channel.errors)
    if channel in EXCEPTIONS:
        comments.append("KNOWN")
    elif error:
        comments.insert(0, "ERROR!")
    comments = " ".join(comments)
    print(f"{channel} {comments}")
