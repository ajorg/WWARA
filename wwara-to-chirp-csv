#!/usr/bin/env python2
from StringIO import StringIO
from csv import DictReader, DictWriter, QUOTE_ALL
from decimal import Decimal
from sys import stdout
from zipfile import ZipFile

import requests

fieldnames = (
    "Location",
    "Name",
    "Frequency",
    "Duplex",
    "Offset",
    "Tone",
    "rToneFreq",
    "cToneFreq",
    "DtcsCode",
    "DtcsPolarity",
    "Mode",
    "Comment",
)
#              'TStep', 'Skip', 'Comment', 'URCALL', 'RPT1CALL', 'RPT2CALL')

r = requests.get("https://www.wwara.org/DataBaseExtract.zip")
# ZipFile requires a file-like object that supports seek
f = StringIO(r.content)
r.close()
z = ZipFile(f)


def drop_decimals(d):
    # Decimal.normalize gives 2E+1 for 20...
    d = str(d)
    if "." in d:
        d = d.rstrip("0").rstrip(".")
    return d


for n in z.namelist():
    if n.endswith(".csv") and "pending" not in n:
        w = DictWriter(stdout, fieldnames)
        w.writeheader()
        with z.open(n) as c:
            # Remove the DATA_SPEC_VERSION header line from the .csv
            c.readline()
            d = DictReader(c)
            i = 0
            for row in d:
                in_freq = Decimal(row["INPUT_FREQ"])
                out_freq = Decimal(row["OUTPUT_FREQ"])
                duplex = "off"
                offset = Decimal(0)
                if out_freq < in_freq:
                    duplex = "+"
                    offset = in_freq - out_freq
                elif out_freq > in_freq:
                    duplex = "-"
                    offset = out_freq - in_freq
                tone = None
                if row["CTCSS_IN"]:
                    tone = "Tone"
                elif row["DCS_CDCSS"]:
                    tone = "DTCS"
                mode = None
                if row["FM_WIDE"] == "Y":
                    mode = "FM"
                elif row["FM_NARROW"] == "Y":
                    mode = "NFM"
                else:
                    continue
                if "Y" in (
                    row["DSTAR_DV"],
                    row["DSTAR_DD"],
                    row["DMR"],
                    row["FUSION"],
                    row["P25_PHASE_1"],
                    row["P25_PHASE_2"],
                    row["NXDN_DIGITAL"],
                    row["ATV"],
                    row["DATV"],
                ):
                    # These are not Analog modes
                    continue
                w.writerow(
                    {
                        "Location": i,
                        # 'Name': ' '.join((row['CALL'], row['CITY'])),
                        "Name": row["CALL"],
                        "Frequency": row["OUTPUT_FREQ"],
                        "Duplex": duplex,
                        "Offset": drop_decimals(offset),
                        "Tone": tone,
                        "rToneFreq": row["CTCSS_IN"] or "88.5",
                        "cToneFreq": row["CTCSS_OUT"] or "88.5",
                        "DtcsCode": row["DCS_CDCSS"] or "23",
                        "DtcsPolarity": "NN",
                        "Mode": mode,
                        # 'Comment': ' / '.join((row['CITY'], row['LOCALE'],
                        #                        row['SPONSOR']))
                    }
                )
                i += 1

f.close()
